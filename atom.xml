<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>CODEHolic</title>
 <link href="http://codeholic.net/atom.xml" rel="self"/>
 <link href="http://codeholic.net"/>
 <updated>2012-12-07T02:16:14+09:00</updated>
 <id>http://codeholic.net</id>
 <author>
   <name>Chan Shik Lim</name>
   <email></email>
 </author>

 
 <entry>
   <title>GitLabHQ Installation</title>
   <link href="http://codeholic.net/Tips/2012/12/07/gitlabhq-installation"/>
   <updated>2012-12-07T00:00:00+09:00</updated>
   <id>http://codeholic.net/Tips/2012/12/07/gitlabhq-installation</id>
   <content type="html">&lt;h2&gt;CentOS 환경에서 GitLab 설치&lt;/h2&gt;

&lt;h3&gt;기본적인 설치&lt;/h3&gt;

&lt;p&gt;GitLab 설치 문서와 CentOS 6 환경에서 GitLab을 설치하는 방법을 다룬 아래 사이트를 참조하여 설치를 진행하자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/gitlabhq/gitlabhq/blob/stable/doc/install/installation.md&quot;&gt;GitLab Installation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/1601228&quot;&gt;https://gist.github.com/1601228&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dlaxar.blogspot.co.at/2012/06/installing-gitlab-with-gitolite-on.html&quot;&gt;http://dlaxar.blogspot.co.at/2012/06/installing-gitlab-with-gitolite-on.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;여기에서는 CentOS 5 환경에서 설치를 진행할 때 발생하는 문제점과 위에서 언급되지 않은 오류가 발생하였을 때, 어떻게 해결할지에 대해서 다룬다.&lt;/p&gt;

&lt;h3&gt;Python 2.7 설치&lt;/h3&gt;

&lt;p&gt;CentOS 5 에는 기본적으로 Python 2.4 버전이 설치되어 있고, 2.6 버전을 패키지로 설치할 수 있다.
또한, yum 스크립트에서 2.4 버전에 대한 의존성을 가지고 있다.&lt;/p&gt;

&lt;p&gt;GitLab 을 설치하기 전에 Python 버전을 2.7로 올리고 진행을 하자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codingwithcody.com/2012/01/python-2-7-on-centos-5-6/&quot;&gt;Python 2.7 on CentOS 5-6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위 사이트에서 Python 2.7을 한번에 설치해주는 스크립트를 얻을 수 있다.&lt;/p&gt;

&lt;p&gt;install.sh&lt;/p&gt;

&lt;pre&gt;
yum -y install gcc gdbm-devel readline-devel ncurses-devel zlib-devel bzip2-devel sqlite-devel db4-devel openssl-devel tk-devel bluez-libs-devel make
cd /var/tmp

wget http://sqlite.org/sqlite-amalgamation-3.7.3.tar.gz
tar xfz sqlite-amalgamation-3.7.3.tar.gz
cd sqlite-3.7.3/
./configure
make
make install

cd /var/tmp
wget http://www.python.org/ftp/python/2.7.1/Python-2.7.1.tgz
tar xvfz Python-2.7.1.tgz
cd Python-2.7.1
./configure --prefix=/opt/python2.7.1 --with-threads --enable-shared
make
make install
 
touch /etc/ld.so.conf.d/opt-python2.7.1.conf
echo &quot;/opt/python2.7.1/lib/&quot; &gt;&gt; /etc/ld.so.conf.d/opt-python2.7.1.conf
ldconfig
 
ln -sf /opt/python2.7.1/bin/python /usr/bin/python2.7
 
cd /var/tmp
wget http://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg
sh setuptools-0.6c11-py2.7.egg --prefix=/opt/python2.7.1
 
/opt/python2.7.1/bin/easy_install pip
ln -sf /opt/python2.7.1/bin/pip /usr/bin/pip
 
pip install virtualenv
ln -sf /opt/python2.7.1/bin/virtualenv /usr/bin/virtualenv
 
mv /usr/bin/python /usr/bin/python-backup
ln -s /usr/bin/python2.7 /usr/bin/python
&lt;/pre&gt;


&lt;p&gt;위 코드를 install.sh 에 저장하고 루트 권한으로 실행하면
/usr/bin/python2.7 명령어를 통해 2.7 버전 Python을 실행할 수 있다.&lt;/p&gt;

&lt;p&gt;2.7 버전을 기본 Python 명령어로 지정하자.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ sudo ln -s /usr/bin/python2.7 /usr/bin/python
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;마지막으로 2.4 버전에 대한 의존성을 가지고 있는 yum 스크립트를 열어
가장 첫 줄을 아래와 같이 수정한다.&lt;/p&gt;

&lt;pre&gt;
#!/usr/bin/python2.4
&lt;/pre&gt;


&lt;h3&gt;charlock_holmes 설치 중에 -licui18n 오류 발생시&lt;/h3&gt;

&lt;pre&gt;
$ sudo gem install charlock_holmes

...
checking for main() in -licui18n... no
...
&lt;/pre&gt;


&lt;p&gt;위와 같은 오류가 발생할 경우에는 libicu-devel 패키지를 설치한다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ sudo yum install libicu-devel
&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;git 와 gitlab 계정&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;gitolite 프로그램은 git 계정에서 실행하여, &lt;strong&gt;git clone&lt;/strong&gt; 등 git 명령어를 처리하는 역할을 한다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gitlab 계정은 웹을 통해 SSH 비밀키를 등록할 수 있게 해주는 기능을 제공한다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;설치 과정 중에 git / gitlab 계정을 서로 자신이 속한 그룹에 포함시키는 과정이 있다. git / gitlab 계정에서 서로 상대방 계정에 속해있는 파일에 접근할 수 있도록 해주는 작업인데, 이를 통해 웹과 Shell 계정을 연동할 수 있다.&lt;/p&gt;

&lt;p&gt;GitLab 웹을 통해 추가한 SSH 비밀키를 git 계정 안에 있는 .ssh/authorized_keys 파일에 추가하여 키 기반 인증을 진행할 수 있도록 한다.&lt;/p&gt;

&lt;h3&gt;통지에 사용할 E-Mail (GMail 사용시) 등록&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;
$ vi /home/gitlab/gitlab/config/environments/production.rb
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;아래 내용을 추가한다.&lt;/p&gt;

&lt;pre&gt;
  config.action_mailer.delivery_method = :smtp
  config.action_mailer.smtp_settings = {
    :address =&gt; 'smtp.gmail.com',
    :port =&gt; 587,
    :domain =&gt; 'domain.com',
    :authentication =&gt; :plain,
    :user_name =&gt; 'account@domain.com',
    :password =&gt; 'password',
    :enable_starttls_auto =&gt; true
  }
  config.action_mailer.perform_deliveries = true
  config.action_mailer.raise_delivery_errors = true
&lt;/pre&gt;


&lt;h3&gt;메일이 발송되지 않을 경우에 resque 재시작&lt;/h3&gt;

&lt;p&gt;메일에 관련된 설정을 변경하면 resque 프로세스를 다시 시작하여 바뀐 설정을 적용한다.&lt;/p&gt;

&lt;pre&gt;
$ ps ax | grep resque
 8409 pts/0    R+     0:00 grep resque
30293 ?        Sl     0:16 resque-1.23.0: Paused

$ sudo kill -9 30293

$ sudo -u gitlab sh -l -c &quot;cd /home/gitlab/gitlab &gt; /dev/null 2&gt;&amp;1 &amp;&amp; ./resque.sh&quot;
&lt;/pre&gt;


&lt;h3&gt;SSL 설정&lt;/h3&gt;

&lt;p&gt;발급 받은 SSL 키를 이용해 HTTPS로 접속할 수 있게 설정하자.&lt;/p&gt;

&lt;p&gt;우선 HTTP(80)를 통해 들어온 연결을 HTTPS(443) 포트로 돌리도록 설정한다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ sudo vi /etc/nginx/nginx.conf
&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;
    ..
    server {
        listen       80;
        server_name  domain.com;

       location / {
           rewrite ^ https://domain.com permanent;
       }
    }
    ..
&lt;/pre&gt;


&lt;p&gt;HTTPS 접속을 처리할 server를 추가한다.&lt;/p&gt;

&lt;pre&gt;
server {
  listen 443;
  server_name domain.com;
  root /home/gitlab/gitlab/public;

  # individual nginx logs for this gitlab vhost
  access_log  /var/log/nginx/gitlab_access.log;
  error_log   /var/log/nginx/gitlab_error.log;

        ssl                  on;
        #ssl_certificate      cert.pem;
        #ssl_certificate_key  cert.key;
        ssl_certificate      /var/ssl/ssl_certificate.crt/
        ssl_certificate_key  /var/ssl/ssl_certificate_key/

        ssl_session_timeout  5m;
        ssl_protocols  SSLv2 SSLv3 TLSv1;
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers   on;


  location / {
    # serve static files from defined root folder;.
    # @gitlab is a named location for the upstream fallback, see below
    try_files $uri $uri/index.html $uri.html @gitlab;
  }

  # if a file, which is not found in the root folder is requested,
  # then the proxy pass the request to the upsteam (gitlab unicorn)
  location @gitlab {
    proxy_read_timeout 300;
    proxy_connect_timeout 300;
    proxy_redirect     off;

    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_set_header   Host              $http_host;
    proxy_set_header   X-Real-IP         $remote_addr;

    proxy_pass http://gitlab;
  }
}
&lt;/pre&gt;


&lt;h2&gt;참고 문서&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/gitlabhq/gitlabhq/blob/stable/doc/install/installation.md&quot;&gt;GitLab Installation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://devday.tistory.com/entry/icu-required-brew-install-icu4c-or-aptget-install-libicudev&quot;&gt;icu required (brew install icu4c or apt-get install libicu-dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/10690255/gitlab-email-setup&quot;&gt;GitLab email setup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/gitlabhq/gitlabhq/issues/1068&quot;&gt;Notification emails not sent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/1601228&quot;&gt;https://gist.github.com/1601228&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dlaxar.blogspot.co.at/2012/06/installing-gitlab-with-gitolite-on.html&quot;&gt;Installing gitlab with gitolite on&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codingwithcody.com/2012/01/python-2-7-on-centos-5-6/&quot;&gt;Python 2.7 on CentOS 5-6&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>QuickLook Plugins</title>
   <link href="http://codeholic.net/Tips/2012/12/05/quicklook-plugins"/>
   <updated>2012-12-05T00:00:00+09:00</updated>
   <id>http://codeholic.net/Tips/2012/12/05/quicklook-plugins</id>
   <content type="html">&lt;h2&gt;압축 파일&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3&gt;BetterZip&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Zip 파일 미리 보기&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://macitbetter.com/BetterZip-Quick-Look-Generator/&quot;&gt;http://macitbetter.com/BetterZip-Quick-Look-Generator/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;실행 후 바로 적용 시키기 위해 아래 명령 입력&lt;/p&gt;

&lt;p&gt;  &lt;code&gt;
  $ qlmanage -r
 &lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Markdown&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3&gt;QLMarkdown&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Markdown 문법으로 작성된 문서 미리 보기&lt;/p&gt;

&lt;p&gt;  https://github.com/toland/qlmarkdown&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 
</feed>